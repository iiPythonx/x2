:: Idle Goos
:: =============================

:: Created by DmmD GM
:: Modified for xpp v4.0 by iiPython

set @bread 0
set @goos 0
set @mfe 0

:func loop ()
    :: Clears Screen
    cls

    :: Prints Counter
    prt "Bread: \x1b[93m" @bread "\x1b[0m | Goos: \x1b[93m" @goos "\x1b[0m | MFE: \x1b[93m" @mfe "\x1b[0m"

    :: Tutorial
    prt "---"
    prt "Press \x1b[93m[enter]\x1b[0m to gain bread!"
    prt "You can purchase more goos or MFEs by entering the \x1b[93m[shop]\x1b[0m."
    prt "Additionally, you can \x1b[93m[save]\x1b[0m your progress or \x1b[93m[load]\x1b[0m from an existing save."
    prt "If you need to leave, you can also \x1b[93m[quit]\x1b[0m."
    prt "---"

    :: Grabs Command
    set command (inp "> ")

    :: Parses Command
    if (command == "") { jmp incrementBread } \
        (command == "shop") { jmp shopMenuPrompt } \
        (command == "load") { jmp loadDataPrompt } \
        (command == "save") { jmp saveDataPrompt } \
        (command == "quit") { jmp quitGamePrompt }

:: Increments Bread Counter
:func incrementBread ()
    set bread (mul (add @goos 1) (add @mfe 1))
    set @bread (add @bread bread)

:: Prompts Shop Menu to User
:func shopMenuPrompt ()
    :: Prompts
    prt "---"
    prt "What would you like to purchase today?"
    prt "\x1b[93m[1]\x1b[0m Goos (1,000 Bread)"
    prt "\tIncreases your bread production!"
    prt "\x1b[93m[2]\x1b[0m MFE (100,000 Goos)"
    prt "\tGenerates more bread on the fly!"
    prt "Enter the number in square brackets to purchase your item!"
    prt "Enter anything else to cancel purchase."

    :: Grabs Selection
    inp "> " ?selection

    :: Parses Selection
    if (selection == "1") "jmp shopMenuGoos"
    if (selection == "2") "jmp shopMenuMFE"

:: Prompts Goos Purchase Menu to User
:func shopMenuGoos ()
    :: Prompts
    prt "---"
    prt "How many goos would you like to purchase?"
    set max (div @bread 1000)
    int max
    prt "You can purchase a maximum of \x1b[93m" max "\x1b[0m goos!"
    
    :: Grabs Count
    inp "> " ?count
    try { int count } { set count 0 }
    if (count < 0) { set count 0 }

    :: Parses Count
    prt "---"
    if (((mul count 1000) > @bread) && (count > 0)) { prt "Not enough bread!" } \
                                                    { jmp shopPurchaseGoos count }

    inp "> "

:: Purchases Goos
:func shopPurchaseGoos (count)
    :: Purchases Goos
    set @goos (add @goos count)

    :: Deduces Bread
    set price (mul count 1000)
    set @bread (sub @bread price)

    :: Prints Confirmation
    if (count == 0) { prt "Purchase canceled!" } \
                    { prt "Successfully bought " count " goos!" }

:: Prompts MFE Purchase Menu to User
:func shopMenuMFE ()
    :: Prompts
    prt "---"
    prt "How many MFE would you like to purchase?"
    set max (div @goos 100000)
    int max
    prt "You can purchase a maximum of \x1b[93m" max "\x1b[0m MFE(s)!"
    
    :: Grabs Count
    inp "> " ?count
    try { int count } { set count 0 }
    if (count < 0) { set count 0 }
    
    :: Parses Count
    prt "---"
    if (((mul count 100000) > @goos) && (count > 0)) { prt "Not enough goos!" } \
                                                     { jmp shopPurchaseMFE count }

    inp "> "

:: Purchases MFE
:func shopPurchaseMFE (count)
    :: Purchases MFE
    set @mfe (add @mfe count)

    :: Deduces Goos
    set @goos (sub @goos (mul count 100000))

    :: Prints Confirmation
    if (count == 0) { prt "Purchase canceled!" } \
                    { prt "Successfully bought " count " MFE(s)!" }

:: Prompts Load Screen to User
:func loadDataPrompt ()
    :: Prompts
    prt "---"
    prt "Are you sure you want to load from a save file and OVERWRITE your current progress?"
    prt "Note: if a save file does not exist, the game may crash!"
    prt "Enter \x1b[93m[y]\x1b[0m to load."
    prt "Enter anything else to cancel."

    :: Grabs Confirmation
    inp "> " ?confirmation

    :: Parses Confirmation
    if (confirmation == "y") { jmp loadData }

:: Loads Data
:func loadData ()
    set data (load "save.goos")
    
    :: Locates Separator : "10|11|12|" -> 2
    set index (idx data "|")
    
    :: Parses Number : "10|11|12" -> "10"
    set end (sub index 1)
    set output (chr data 0 end)
    int output
    set @bread output
    
    :: Finds Index of Next Character in Data : "10|11|12|" -> 3
    set dataStart (add index 1)
    
    :: Finds Index of Last Character in Data : "10|11|12|" -> 8
    set dataLength (len data)
    set dataEnd (sub dataLength 1)

    :: Slices Data : "10|11|12|" -> "11|12|"
    set data (chr data dataStart dataEnd)

    :: Same As Above
    set index (idx data "|")
    set end (sub index 1)
    set output (chr data 0 end)
    int output
    set @goos output
    set dataStart (add index 1)
    set dataLength (len data)
    set dataEnd (sub dataLength 1)
    set data (chr data dataStart dataEnd)

    :: Same As Above
    set index (idx data "|")
    set end (sub index 1)
    set output (chr data 0 end)
    int output
    set @mfe output
    set dataStart (add index 1)
    set dataLength (len data)
    set dataEnd (sub dataLength 1)
    set data (chr data dataStart dataEnd)

:: Prompts Save Screen to User
:func saveDataPrompt ()
    :: Prompts
    prt "---"
    prt "Are you sure you want to save your progress and OVERWRITE your current save file?"
    prt "Enter \x1b[93m[y]\x1b[0m to save."
    prt "Enter anything else to cancel."

    :: Grabs Confirmation
    inp "> " ?confirmation

    :: Parses Confirmation
    if (confirmation == "y") { jmp saveData }

:: Saves Data
:func saveData ()
    :: Stringifies Data
    set bread (str (add @bread 0))  :: Hack to prevent str from stringifying the globals
    set goos (str (add @goos 0))    :: - iiPython
    set mfe (str (add @mfe 0))

    :: Appends Data
    set data (add bread "|" goos "|" mfe "|")

    ::  set data (add bread "|")
    ::  set data (add data goos)
    ::  set data (add data "|")
    ::  set data (add data mfe)
    ::  set data (add data "|")

    :: Saves Data
    save "save.goos" data

:: Prompts Quit Screen to User
:func quitGamePrompt ()
    :: Prompts
    prt "---"
    prt "Are you sure you want to quit?"
    prt "Enter \x1b[93m[y]\x1b[0m to save and quit."
    prt "Enter \x1b[93m[q]\x1b[0m to quit without saving."
    prt "Enter anything else to cancel."

    :: Grabs Confirmation
    inp "> " ?confirmation

    :: Parses Confirmation
    if (confirmation == "y") { jmp quitGameSave } \
       (confirmation == "q") { jmp quitGameExit }

:: Quits Game Without Saving Data
:func quitGameExit ()
    ext

:: Saves Data and Quits Game
:func quitGameSave ()
    jmp saveData
    ext

:: Main Function
:func game ()
    :: Prompts Welcome Screen
    cls
    prt "\x1b[94mIdle Goos\x1b[0m"
    prt "Press \x1b[93m[enter]\x1b[0m to start!"
    prt ""
    prt "\x1b[90mMade with \x1b[91mLove\x1b[90m and \x1b[93mBread\x1b[90m by DmmD @ 2023\x1b[0m"
    prt "\x1b[90mversion demo.1\x1b[0m"
    inp "> "
    
    :: Initiates Game Loop
    whl (1) { jmp loop }

:: Initiates Game
jmp game
