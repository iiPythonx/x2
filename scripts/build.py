# Copyright 2022 iiPython
# Build the installer.py file

# Modules
import os
import io
import shutil
import zipfile
from base64 import b85encode

try:
    from main import __version__ as x2_version

except ImportError:
    x2_version = input("x2 version: ")

# Initialization
to_include = [f for f in os.listdir() if f not in [
    ".git", "__pycache__", "md", "scripts", ".xtconfig", "main.xt",
    "build", "dist", "installer.py", "installer.spec"
]]
print("Including all of the following:\n", "\n\t-  ".join([""] + to_include).lstrip("\n"))
if not input("Is this correct (y/N)? ").lower() == "y":
    exit(1)

# Build our zip file into memory
print("Zipping to memory ...")
bio = io.BytesIO()
with zipfile.ZipFile(bio, "w") as zf:
    for fn in to_include:
        if os.path.isfile(fn):
            zf.write(fn, fn)

        else:
            for path, _, files in os.walk(fn):
                if "__pycache__" in path:
                    continue

                for file in files:
                    fp = os.path.join(path, file)
                    zf.write(fp, fp)

print(" ..done!")

# Create installer.py
print("Writing to installer.py ...")
installer_raw = f"""# Copyright 2022 iiPython
# This file is autogenerated, please do not modify it.

# Modules
import os
import io
import shutil
import zipfile
from base64 import b85decode

# Pre-install notice
print("x2 Installer for {x2_version}\\n")
print("Please note: this installer uses UP TO 2GB OF RAM!")
print("Ensure you have 2gb of RAM available, then type 'proceed' to continue.")

if input("> ") != "proceed":
    exit(0)

print()

# Handle installation
x2_dir = os.path.join(os.path.expanduser("~"), "x2")
if os.path.isdir(x2_dir):
    if (input("x2 is already installed, upgrade (y/N)? ") or "n").lower() != "y":
        exit(0)

    shutil.rmtree(x2_dir)

with zipfile.ZipFile(io.BytesIO(b85decode({b85encode(bio.getvalue())})), "r") as zf:
    zf.extractall(x2_dir)

shutil.move(os.path.join(x2_dir, "main.py"), os.path.join(x2_dir, "x2.py"))

# Create batch launcher
with open(os.path.join(x2_dir, "x2.bat"), "w+") as launcher:
    launcher.write("@echo off\\ntitle x2\\n\\"%~dp0python\python.exe\\" \\"%~dp0x2.py\\" %*")

if (input("Add x2 to PATH (Y/n)? ") or "y").lower() == "y":
    os.system(f"setx PATH \\"%PATH%;{{x2_dir}}\\"")

# Finished with install
print("\\nInstallation finished successfully.\\nMake sure you reopen all terminals for PATH to take effect.")
input()
"""  # noqa
del bio

with open("installer.py", "w+") as installer:
    installer.write(installer_raw)

print("  ..done!")

# Build with pyinstaller
if shutil.which("pyinstaller"):
    if input("pyinstaller was found, build now (y/N)? ").lower() == "y":
        os.system("pyinstaller -i scripts/assets/x2.ico -F installer.py")
